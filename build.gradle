plugins {
    id "java-gradle-plugin"
    id "groovy"
    id 'signing'
    id 'maven-publish'
    alias(libs.plugins.pluginpublish)
}

project.group = 'com.carrotsearch.gradle.opts'
project.version = libs.versions.projectVersion.get()
project.description = 'Overrideable build options for gradle'

project.ext.websiteAddress = "https://github.com/carrotsearch/gradle-opts-plugin"
project.ext.vcsAddress = "git@github.com:carrotsearch/gradle-opts-plugin.git"

repositories {
    mavenCentral()
}

dependencies {
    testImplementation libs.junit.jupiter
    testRuntimeOnly("org.junit.platform:junit-platform-launcher")

    testImplementation libs.assertj

    testImplementation platform(libs.spockframework.get())
    testImplementation "org.spockframework:spock-core"
}

gradlePlugin {
    website = project.ext.websiteAddress
    vcsUrl = project.ext.websiteAddress + ".git"

    plugins {
        opts {
            id = 'com.carrotsearch.gradle.opts'
            implementationClass = 'com.carrotsearch.gradle.buildinfra.buildoptions.BuildOptionsPlugin'
            displayName = project.description
            description = project.description
            tags.set([
                    'convention',
                    'build-utility',
                    'testing',
                    'options'
            ])
        }
    }
}

tasks.withType(Javadoc).configureEach {
    it.options.addBooleanOption("Xdoclint:none", true)
}

tasks.register("sourcesJar", Jar, {
    dependsOn classes
    archiveClassifier = 'sources'
    from sourceSets.main.allJava
})

tasks.register("javadocJar", Jar, {
    dependsOn javadoc
    archiveClassifier = 'javadoc'
    from javadoc.destinationDir
})

tasks.withType(Test).configureEach {
    useJUnitPlatform()
    systemProperty("tests.gradle.version", gradle.gradleVersion)
}

tasks.matching { it.name == "publishAllPublicationsToSonatypeRepository" }.configureEach {
    doFirst {
        if (gradle.startParameter.maxWorkerCount != 1) {
            throw new GradleException("Use '--max-workers 1' to prevent multiple uploads.")
        }
    }
}

tasks.register("publishToSonatype", {
    description = "Publish plugin to Sonatype"
    group = "Publishing"
    dependsOn "publishAllPublicationsToSonatypeRepository"
})

publishing {
    repositories {
        maven {
            name = 'build'
            url = project.layout.buildDirectory.dir("maven").get().asFile
        }

        maven {
            name = 'sonatype'
            url = "https://s01.oss.sonatype.org/service/local/staging/deploy/maven2"

            credentials {
                if (project.hasProperty('nexusUsername')) {
                    username = project.nexusUsername
                }
                if (project.hasProperty('nexusPassword')) {
                    password = project.nexusPassword
                }
            }
        }
    }

    publications {
        withType(MavenPublication) {
            pom {
                inceptionYear = "2025"

                name = project.name
                description = project.description
                url = websiteAddress

                licenses {
                    license {
                        name = 'Apache 2'
                        url = 'https://www.apache.org/licenses/LICENSE-2.0.txt'
                    }
                }

                organization {
                    name = "Carrot Search s.c."
                    url = "https://www.carrotsearch.com"
                }

                developers {
                    developer {
                        id = 'dawid.weiss'
                        name = 'Dawid Weiss'
                        email = 'dawid.weiss@carrotsearch.com'
                    }
                }

                scm {
                    connection = 'scm:git:' + project.ext.vcsAddress
                    developerConnection = project.ext.vcsAddress
                    url = websiteAddress
                }
            }
        }
    }
}