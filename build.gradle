plugins {
    id 'java-gradle-plugin'
    id 'maven-publish'
    id 'groovy'
    id 'signing'
    id 'com.gradle.plugin-publish' version '0.12.0'
}

group = 'com.carrotsearch.gradle.opts'
version = '0.0.6-SNAPSHOT'
def humanName = 'Gradle Opts Plugin'
description = 'Configurable project options management'

repositories {
    mavenCentral()
}

dependencies {
    testImplementation 'junit:junit:4.13'
}

gradlePlugin {
    plugins {
        opts {
            id = 'com.carrotsearch.gradle.opts'
            implementationClass = 'com.carrotsearch.gradle.opts.OptsPlugin'
            displayName = humanName
            description = project.description
        }
    }
}

sourceSets {
    functionalTest {
    }
}

gradlePlugin.testSourceSets(sourceSets.functionalTest)
configurations.functionalTestImplementation.extendsFrom(configurations.testImplementation)

tasks.register('functionalTest', Test) {
    testClassesDirs = sourceSets.functionalTest.output.classesDirs
    classpath = sourceSets.functionalTest.runtimeClasspath
}

check {
    dependsOn(tasks.functionalTest)
}

sourceCompatibility = 8
targetCompatibility = 8 

tasks.withType(JavaCompile) {
  options.compilerArgs << "-Xlint:unchecked" << "-Xlint:deprecation"
  options.encoding = "UTF-8"
} 

pluginBundle {
    website = 'https://github.com/dweiss/gradle-opts-plugin'
    vcsUrl = 'https://github.com/dweiss/gradle-opts-plugin.git'
    tags = ['properties', 'utility']
}

task sourcesJar(type: Jar, dependsOn: classes) {
    archiveClassifier = 'sources'
    from sourceSets.main.allJava
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    archiveClassifier = 'javadoc'
    from javadoc.destinationDir
}

publishing {
    repositories {
        maven {
            name = 'staging'
            url = "${buildDir}/m2-local"
        }

        maven {
            name = 'sonatype'
            url "https://oss.sonatype.org/service/local/staging/deploy/maven2"

            credentials {
                if (project.hasProperty('nexusUsername')) {
                    username project.nexusUsername
                }
                if (project.hasProperty('nexusPassword')) {
                    password project.nexusPassword
                }
            }
        }
    }

    afterEvaluate {
        signing {
            sign publishing.publications.optsPluginMarkerMaven
            sign publishing.publications.pluginMaven
        }

        publications {
            pluginMaven {
              artifact sourcesJar
              artifact javadocJar
            }

            withType(MavenPublication) {
                pom {
                    inceptionYear = "2020"

                    name = humanName
                    description = project.description
                    url = pluginBundle.website

                    licenses {
                        license {
                            name = 'Apache 2'
                            url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                        }
                    }

                    organization {
                        name = "Carrot Search s.c."
                        url = "https://www.carrotsearch.com"
                    }

                    developers {
                        developer {
                            id = 'dawid.weiss'
                            name = 'Dawid Weiss'
                            email = 'dawid.weiss@carrotsearch.com'
                        }
                    }

                    scm {
                        connection = 'scm:git:git@github.com:carrotsearch/hppc.git'
                        developerConnection = pluginBundle.vcsUrl
                        url = pluginBundle.website
                    }
                }
            }
        }
    }
}

task deploy {
    dependsOn "publishOptsPluginMarkerMavenPublicationToSonatypeRepository", 
              "publishPluginMavenPublicationToSonatypeRepository",
              publishPlugins
}

task deployStaging {
    dependsOn "publishOptsPluginMarkerMavenPublicationToStagingRepository", 
              "publishPluginMavenPublicationToStagingRepository"
}
